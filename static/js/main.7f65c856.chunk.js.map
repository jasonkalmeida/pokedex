{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_useState","useState","_useState2","Object","slicedToArray","suggest","setSuggest","listPoke","map","sug","index","react_default","a","createElement","className","onClick","event","updateCurrent","target","innerHTML","charAt","toUpperCase","slice","toLowerCase","key","useEffect","tempSug","word","names","matches","length","forEach","name","indexOf","push","findSug","currentSearch","pokeNames","type","value","onChange","placeholder","currentPoke","id","Dashboard","console","log","listTypes","alt","currentName","src","toFixed","App","_useState3","_useState4","pokemon","setPokemon","_useState5","_useState6","setNames","fetch","then","res","json","data","holdNames","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","results","Symbol","iterator","next","done","item","err","return","_useState7","_useState8","setCurrentPoke","_useState9","_useState10","setCurrentSearch","newSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f65c856.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n//import logo from './logo.svg';\nimport './App.scss';\n\nfunction SearchBar(props){\n  const [suggest, setSuggest] = useState([]);\n  const listPoke = suggest.map((sug, index) =>\n    <li className=\"suggestItem\" onClick={(event)=> props.updateCurrent(event.target.innerHTML.charAt(0).toUpperCase() + event.target.innerHTML.slice(1).toLowerCase())} key={index}>{sug}</li>\n  );\n\n  useEffect(() => {\n    let tempSug = findSug(props.currentSearch, props.pokeNames);\n    //console.log(tempSug);\n    setSuggest(tempSug);\n  }, [props.currentSearch, props.pokeNames]);\n\n\n  return(\n    <div className=\"searchBar\">\n      <input className=\"searchInput\" type=\"text\" value={props.currentSearch} onChange={(event) => props.updateCurrent(event.target.value)} placeholder=\"Search PokÃ©dex...\"></input>\n      {\n        suggest.length > 0 && props.currentPoke == null &&\n          <ul id=\"suggestList\">\n            {listPoke}\n          </ul>\n      }\n    </div>\n  )\n}\n\nfunction findSug(word, names){\n  /*for(let name in names){\n    console.log(name);\n  }*/\n\n  var matches = [];\n  if(word.length !== 0)\n  {\n    names.forEach((name) => {\n      //console.log(name);\n      if(name.indexOf(word.toLowerCase()) === 0 && name.length !== word.length){\n        matches.push(name);\n      }\n    });\n  }\n\n  return matches;\n}\n\nfunction Dashboard(props){\n\n  if(props.currentPoke != null)\n  {\n    console.log(props.currentPoke);\n    const listTypes = props.currentPoke['types'].map((type, index) =>\n      <li className=\"typeItem\" key={index}><span className={type['type']['name'] + \" typeTitle\"}>{type['type']['name']}</span></li>\n    );\n\n    return(\n      <div className = \"dashBoard\">\n        <img alt={props.currentName} src={props.currentPoke['sprites']['front_default']}></img>\n        <h1>#{props.currentPoke['id']} {props.currentName}</h1>\n        <h2>Type{(listTypes.length > 1) ? \"s\" : \"\"}</h2>\n        <ul className = \"pokeType\">\n          {listTypes}\n        </ul>\n        <h2>Height: {(props.currentPoke['height']/3.048).toFixed(2)} ft</h2>\n        <h2>Weight: {(props.currentPoke['weight']/4.536).toFixed(2)} lbs</h2>\n      </div>\n    );\n  }\n  else {\n    return(\n      null\n    );\n  }\n\n}\n\nfunction App() {\n  const [pokemon, setPokemon] = useState(null);\n  const [pokeNames, setNames] = useState(null)\n  //ADD EASTER EGGS\n  useEffect(() => {\n    //console.log(\"In here\");\n    fetch('https://pokeapi.co/api/v2/pokemon/?offset=0&limit=151')\n      .then(res=>res.json())\n      .then(data=>{\n        var holdNames = []\n        for(let item of data.results){\n          holdNames.push(item['name']);\n        }\n        setNames(holdNames);\n        setPokemon(data.results);\n      });\n\n  }, []);\n\n\n  const [currentPoke, setCurrentPoke] = useState(null);\n  const [currentSearch, setCurrentSearch] = useState('');\n\n  useEffect(() => {\n\n    if(pokeNames !== null && pokeNames.indexOf(currentSearch.toLowerCase()) !== -1){\n      //setCurrentPoke(currentSearch.charAt(0).toUpperCase() + currentSearch.slice(1).toLowerCase());\n      //console.log(\"Found a pokemon\");\n      let id = pokeNames.indexOf(currentSearch.toLowerCase()) + 1;\n      fetch('https://pokeapi.co/api/v2/pokemon/' + id)\n        .then(res=>res.json())\n        .then(data=>setCurrentPoke(data));\n\n    } else {\n      setCurrentPoke(null);\n    }\n\n  }, [currentSearch, pokeNames]);\n\n\n\n  if(! pokemon){\n    return(\n      <h1>Loading</h1>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchBar currentPoke={currentPoke} pokeNames ={pokeNames} currentSearch={currentSearch} updateCurrent={(newSearch) => setCurrentSearch(newSearch)} />\n      <Dashboard currentPoke={currentPoke} currentName = {(currentPoke != null) ? currentPoke['name'].charAt(0).toUpperCase() + currentPoke['name'].slice(1).toLowerCase() : \"\"} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}